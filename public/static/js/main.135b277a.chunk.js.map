{"version":3,"sources":["serviceWorker.js","redux/action/types/index.js","redux/reducer/index.js","redux/sagas/index.js","redux/store/index.js","components/ContentDisplay/index.js","components/ContentCard/index.js","components/ContentList/index.js","pages/Home/index.js","components/SeasonList/index.js","pages/Overview/index.js","pages/Watch/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Types","MAKE_API_CALL","API_RESPONSE_SUCESS","API_RESPONSE_FAIL","CHANGE_HIGHLIGHTED_CONTENT","SET_INFO_VISIBLITY","SET_VIDEO_URL","reducer","state","action","type","payload","console","log","storedContent","data","highlightedContent","isLoading","requestedContent","find","content","id","isInfoVisible","video_url","get_content","watcher","rootSaga","call","axios","get","response","put","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","overview","hasHighlightedContent","applyMiddleware","run","ContentDisplay","useSelector","images","name","history","useHistory","key","generate","className","src","backdrop_image_url","alt","style","opacity","onClick","push","ContentCard","props","dispatch","useDispatch","poster_image_url","ContentList","content_array","map","Home","useEffect","color","SeasonList","season","index","trigger","triggerTagName","overflowWhenOpen","episodes","episode","still_image_url","episode_number","Overview","vote_average","genres","genre","seasons","marginTop","marginBottom","Watch","url","playing","controls","ReactDOM","render","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.135b277a.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  \n    window.location.hostname === '[::1]' ||\n    \n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        \n        checkValidServiceWorker(swUrl, config);\n\n        \n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        \n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              \n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  \n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n     \n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        \n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n       \n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst Types = {\n        MAKE_API_CALL: \"MAKE_API_CALL\",\n        API_RESPONSE_SUCESS: \"API_RESPONSE_SUCESS\",\n        API_RESPONSE_FAIL: \"API_RESPONSE_FAIL\",\n        CHANGE_HIGHLIGHTED_CONTENT: \"CHANGE_HIGHLIGHTED_CONTENT\",\n        SET_INFO_VISIBLITY: \"SET_INFO_VISIBLITY\",\n        SET_VIDEO_URL: \"SET_VIDEO_URL\"\n}\n\nexport default Types","import Types from '../action/types'\n\nconst reducer = (state, action) => {\n\n    const {type, payload} = action\n\n    switch(type){\n        \n        case Types.API_RESPONSE_FAIL:\n            console.log(payload)\n        return {}\n\n        case Types.API_RESPONSE_SUCESS:\n        return  {...state, storedContent: payload.data, highlightedContent: payload.data[0], isLoading: false}\n\n        case Types.CHANGE_HIGHLIGHTED_CONTENT:\n            let requestedContent = state.storedContent.find( content => content.id === payload?content:false)\n        return  {...state, highlightedContent: requestedContent}\n\n        case Types.SET_INFO_VISIBLITY:\n            return {...state, isInfoVisible: payload}\n\n        case Types.SET_VIDEO_URL:\n            return {...state, video_url: payload}\n\n        default:\n            return state\n    }\n\n}\n\nexport default reducer\n\n","import {put, all, takeLatest, call} from 'redux-saga/effects'\nimport axios from 'axios'\nimport Types from '../action/types'\n\nexport function* get_content(){\n    try{\n        let response = yield call(axios.get, ['http://daisukitamago.io/api/content'])\n        yield put({type: Types.API_RESPONSE_SUCESS, payload: response})\n    } catch ( error ) {\n        yield put({type: Types.API_RESPONSE_FAIL, payload: error})\n    }\n}\n\nexport function* watcher(){\n    yield takeLatest(Types.MAKE_API_CALL, get_content)\n}\n\nexport default function* rootSaga(){\n    yield all ( [\n        watcher()\n    ])\n}","import {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from '../reducer'\nimport rootSaga from '../sagas'\n\nconst initialState = {\n    highlightedContent: {\n        overview: ''\n    },\n    isLoading: true,\n    storedContent: [],\n    hasHighlightedContent: false,\n    isInfoVisible: false,\n    video_url: 'http://localhost/api/content/watch/0000/1/1'\n}\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(reducer, initialState ,applyMiddleware(sagaMiddleware))\n\nsagaMiddleware.run(rootSaga)\n\nexport default store\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport {useHistory} from 'react-router-dom'\nimport {generate} from 'shortid'\nimport './index.css'\n\nfunction ContentDisplay() {\n\n    const {overview, images, name} = useSelector( state => state.highlightedContent)\n    const history = useHistory()\n    \n    return (\n        <div key={generate()} className=\"content-display display-animation\">\n            <img src={images?.backdrop_image_url} alt=\"anime backdrop\"/>\n            <div className=\"content-info opacity-animation\" style={{opacity: 0}}>\n                <span><h1>{name}</h1></span>\n                <span id=\"overview\">{overview}</span>\n                <button onClick={() => history.push('/overview')}>Watch</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ContentDisplay\n","import React from 'react'\nimport {useDispatch} from 'react-redux'\nimport Types from '../../redux/action/types'\nimport './index.css'\n\nfunction ContentCard({props}) {\n\n    const dispatch = useDispatch()\n    const {images, id} = props\n\n    return (\n        <div className=\"content-card\" onClick={() => dispatch({type: Types.CHANGE_HIGHLIGHTED_CONTENT, payload: id})}>\n            <img src={images.poster_image_url} alt=\"Anime Poster\"/>\n        </div>\n    )\n}\n\n\nexport default ContentCard\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport ContentCard from '../ContentCard'\nimport ScrollContainer from 'react-indiana-drag-scroll'\nimport './index.css'\n\nconst ContentList = () => {\n\n    const content_array = useSelector( state => state.storedContent )\n\n    return (\n        <ScrollContainer className=\"content-list\">\n            {content_array.map( content => <ContentCard key={content.id} props={content}/>)}\n        </ScrollContainer>\n    )\n}\n\nexport default ContentList\n","import React, { useEffect } from 'react'\nimport { CircleSpinner } from 'react-spinners-kit'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Types from '../../redux/action/types'\nimport ContentDisplay from '../../components/ContentDisplay'\nimport ContentList from '../../components/ContentList'\nimport './index.css'\n\nconst Home = () => {\n\n    const isLoading = useSelector(state => state.isLoading)\n    const dispatch = useDispatch()\n\n    useEffect(() => { \n        if(isLoading){\n            dispatch({ type: Types.MAKE_API_CALL })\n        } \n    }, [dispatch])\n\n\n    return isLoading ?\n            <div className=\"text home-container \">\n                <CircleSpinner color=\"#E50914\" />\n                <span>Hold on a a few moments...</span>\n            </div>\n            :\n            <>\n                <ContentDisplay />\n                <ContentList />\n            </>\n\n}\n\nexport default Home\n","import React from 'react'\nimport Types from '../../redux/action/types'\nimport {useDispatch} from 'react-redux'\nimport {useHistory} from 'react-router-dom'\nimport Collapsible from 'react-collapsible'\nimport './index.css'\n\nconst SeasonList = ({props}) => {\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    return props.map( (season, index) => {\n        return (\n            <Collapsible trigger={`Season ${index+1}`} triggerTagName=\"div\" overflowWhenOpen={'auto'} key={season.id}>\n                {season.episodes.map( episode => \n                  episode.overview !== \"\" ? (\n                    <div className=\"Collapsible__item\" key={episode.id} onClick={ \n                        () => {\n                        dispatch({type: Types.SET_VIDEO_URL, payload: episode.video_url})\n                        history.push('/watch')\n                    }}>\n                        <img src={episode.still_image_url} alt=\"anime still\" />\n                        <div className=\"item-info\">\n                            <h1 className=\"item-title\">{episode.name}</h1>\n                            <span className=\"item-overview\">\n                                Episode: {episode.episode_number} \n                                <br/>\n                                {episode.overview}\n                            </span>\n                        </div>\n                    </div>\n                ) : <></>\n                )}\n            </Collapsible>\n        )\n    })\n}\n\nexport default SeasonList\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport {useHistory} from 'react-router-dom'\nimport SeasonList from '../../components/SeasonList'\nimport './index.css'\n\nconst Overview = () => {\n\n    const history = useHistory()\n    const content = useSelector( state => state.highlightedContent)\n\n    return (\n        <div className=\"overview-container\">\n            <div className=\"overview-header\">\n              <img src={content.images.poster_image_url} alt=\"Anime poster\"/>\n              <div className=\"overview-info text\">\n                  <h1 className=\"title\">{content.name}</h1>\n                  <span>{content.overview}</span>\n                  <span>Community rating:  \n                  <span style={{color: content.vote_average>7?'green':'yellow'}}>\n                  {'  '+ content.vote_average}\n                  </span>\n                  </span>\n                  <span>Genres: {content.genres.map( genre => genre.name+\", \")}</span>\n                </div>\n            </div>\n            <div className=\"overview-body\">\n              <SeasonList props={content.seasons}/>\n              <button style={{marginTop: 30, marginBottom: 30}} onClick={() => history.push('/')}>Back</button>\n            </div>\n       </div>\n    )\n}\n\nexport default Overview\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport ReactPlayer from 'react-player'\nimport {useHistory} from 'react-router-dom'\nimport './index.css'\n\nconst Watch = () => {\n\n    const history = useHistory()\n    const video_url = useSelector( state => state.video_url)\n    return (\n        <div className=\"watch-container\">\n            <ReactPlayer \n                url={video_url}\n                playing={true}\n                controls={true}\n                className=\"react-player\"\n            />\n            <button onClick={() => history.push('/overview')}>Back</button>\n        </div>\n    )\n}\n\nexport default Watch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nimport Home from './pages/Home'\nimport Overview from './pages/Overview'\nimport Watch from './pages/Watch'\nimport './index.css'\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact={true} component={Home}/>\n        <Route path=\"/overview\" component={Overview}/>\n        <Route path=\"/watch\" component={Watch}/>\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}